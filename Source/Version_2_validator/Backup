
####################################
#           inferior_borene        #
####################################
def get_inferior_borene_path(tpath):
	maxpopulation = 0
	maxcapacite = 0
	inferior_borene = 0
	for tp in tpath:
		if tp['node_1'].pop != 0:
			maxpopulation = tp['node_1'].pop
		maxcapacite = max(maxpopulation/tp['arc'].cap,maxcapacite)
		inferior_borene +=tp['arc'].len
	inferior_borene += maxcapacite
	return inferior_borene


def get_inferior_borene_graph(escapes_routes):
	inferior_borene_gr = 0
	inferior_borene_pa = 0
	for route in escapes_routes:
		tpath = get_path(node_list,arc_list,route)
		inferior_borene_pa = get_inferior_borene_path(tpath)
		inferior_borene_gr = max(inferior_borene_pa,inferior_borene_gr)
	return inferior_borene_gr

def write_solution():
	f = open("solution91.txt", "w+")
	f.write("This is solution of inferior borene \r\n")
	f.write("%d \r\n"% (nstarting_node))

	for i in range(10):
		f.write("This is line %d\r\n" % (i + 1))
	f.close()



####################################
#           superior_borene        #
####################################





####################################
#                                  #
####################################
def solution_validator():
	pass

####################################
#                                  #
####################################



checher pre



from step_1 import Parser
from step_1 import Node
from step_1 import Arc
from step_1 import node_list
from step_1 import arc_list
import sys
from itertools import tee




class Checker():
    def __init__(self, datafile, solfile):
        self.dataFile = datafile
        self.solFile = solfile

    def ini_list(self,list,startingTime):
        if startingTime != 0:
            for time in range (0,startingTime):
                list.append('0')
        return list

    def re_inserer(self,node,listCon):
        nodeid = node.nid

        population = node.pop
        safenode = node.sfnode
        startingnode = node.stgnode
        listEvac = node.lEvac
        del node_list[int(node.nid)-1]
        node_list.insert(int(node.nid)-1,Node(nodeid, population, safenode, startingnode, listCon))



    def garde_inserer(self,node,listCon):
        nodeid = node.nid
        population = node.pop
        safenode = node.sfnode
        startingnode = node.stgnode
        listEvac = node.lEvac
        del node_list[int(node.nid) - 1]

        node_list.insert(int(node.nid)-1,Node(nodeid, population, safenode, startingnode, listCon+listEvac))

    def gene_nombre_fois_evacuation(self,info,quotient,modulo):
        listPartTwo = []
        for time in range(0,quotient):
            listPartTwo.append(str(info['max_rate']))
        if modulo!=0:
            listPartTwo.append(str(modulo))
        return listPartTwo



    def create_debut_list(self,content_nodes_evac):
        for info in content_nodes_evac:
            print(str(info['node_id'])+" Max Rate : "+str(info['max_rate'])+"  Start Time : "+str(info['starting_date_evacuation']))
            for no in node_list:
                if no.nid == info['node_id']:
                    listVide = []
                    listContainer =[]
                    listContainer.extend(self.ini_list(listVide, info['starting_date_evacuation']))

                    quotient = int(no.pop)//int(info['max_rate'])
                    print("Quotient is "+str(quotient))
                    modulo = int(int(no.pop)%int(info['max_rate']))
                    print("Modulo "+str(modulo))
                    listPart2 = self.gene_nombre_fois_evacuation(info, quotient, modulo)
                    self.re_inserer(no, listContainer+listPart2)


    def find_arc_predesseur_Path(self,node,tPath):
        listArcSuc = []
        for tp in tPath:
            print(str(tp['node_2'].nid)+"     "+str(node.nid))
            if tp['node_2'].nid==node.nid:
                listArcSuc.append(tp['arc'])
        return listArcSuc

    def find_arc_predesseur_Graphe(self,node,parser,escapes_routes):
        listArcSuc = []
        for route in escapes_routes:
            tpath = parser.get_path(node_list, arc_list, route)
            listArcSuc=listArcSuc + self.find_arc_predesseur_Path(node, tpath)
        for ll in listArcSuc:
           print("Node  "+str(node.nid)+"  Son Sucdesseur has these arc (id):  --- "+str(ll.arid))
        return listArcSuc

    def find_node_predesseur_Graphe(self,listArcSuc):
        listNodeSuc = []
        for arc in listArcSuc:
            for node in node_list:
                if node.nid == arc.n1:
                    listNodeSuc.append(node)
        for ln in listNodeSuc:
            print("Son Sucdesseur has these node (id):  --- "+str(ln.nid))
        return listNodeSuc




    def merge_list_noeuds_predesseur(self,listNodeSuc,n3,listArcSuc):
        cmp=0
        listContientlistSucp = []
        for nodeP in listNodeSuc:
            listSucp = []
            for decal in range(0, int(listArcSuc[cmp].len)):
                listSucp.append('0')
            print("Type is "+str(type(nodeP)))
            listSucp.extend(nodeP.lEvac)
            print("List prepared1 as    " + str(listSucp))
            cmp += 1
            listContientlistSucp.append(listSucp)
        print("List Contient list  length    " + str(len(listContientlistSucp)))
        print("List Contient list  is    " + str(listContientlistSucp))

        listSucp3 = []
        if (int(len(listContientlistSucp))==1):
            listSucp3.extend(listContientlistSucp[0])
        elif(int(len(listContientlistSucp))==2):
            for i in range(0, max(len(listContientlistSucp[0]), len(listContientlistSucp[1]))):
                if i < min(len(listContientlistSucp[0]), len(listContientlistSucp[1])):
                    print('22'+ "  and i is "+str(i))
                    listSucp3.append(str(int(listContientlistSucp[0][i]) + int(listContientlistSucp[1][i])))
                elif len(listContientlistSucp[0]) < len(listContientlistSucp[1]):
                    print('33')
                    listSucp3.append(listContientlistSucp[1][i])
                else:
                    print('4444')
                    listSucp3.append(listContientlistSucp[0][i])
        else:
            for j in range (0,len(listContientlistSucp)-2):
                for i in range(0, max(len(listContientlistSucp[j]), len(listContientlistSucp[j+1]))):
                    if i < min(len(listContientlistSucp[j]), len(listContientlistSucp[j+1])):
                        print('22'+ "  and i is "+str(i))
                        listSucp3.append(str(int(listContientlistSucp[j][i]) + int(listContientlistSucp[j+1][i])))
                    elif len(listContientlistSucp[j]) < len(listContientlistSucp[j+1]):
                        print('33')
                        listSucp3.append(listContientlistSucp[j+1][i])
                    else:
                        print('4444')
                        listSucp3.append(listContientlistSucp[j][i])


        self.re_inserer(n3, (listSucp3))
        print("Node pere id is --  " + str(n3.nid) + "  -- Mise a jour pere noeud! Son liste is  " + str(listSucp3))







        # listSucp = []
        # for decal in range (0,int(arc1.len)):
        #     listSucp.append('0')
        # listSucp.extend(n1.lEvac)
        # print("List prepared1 as    "+str(listSucp))
        # listSucp2 = []
        # for decal2 in range (0,int(arc2.len)):
        #     listSucp2.append('0')
        # listSucp2.extend(n2.lEvac)
        # print("List prepared2 as    " + str(listSucp2))
        #listSucp3 = []
        # for i in range (0,max(len(listSucp),len(listSucp2))):
        #     if i<min(len(listSucp),len(listSucp2)) :
        #         listSucp3.append(str(int(listSucp[i])+int(listSucp2[i])))
        #     elif len(listSucp)<len(listSucp2):
        #         listSucp3.append(listSucp2[i])
        #     else:
        #         listSucp3.append(listSucp[i])
        # self.re_inserer(n3, (listSucp3))
        # print("n3 id is --"+str(n3.nid)+ "-- Mise a jour 3eme noeud! Son liste is  "+str(listSucp3))


    def parcour_recurssif(self,finishnode,parser,escapes_routes,content_nodes_evac):
        #Condition d'arret
        self.create_debut_list(content_nodes_evac)

        listArcSuc = self.find_arc_predesseur_Graphe(finishnode, parser, escapes_routes)
        listNodeSuc = self.find_node_predesseur_Graphe(listArcSuc)
        self.merge_list_noeuds_predesseur(listNodeSuc, finishnode, listArcSuc)
        for nodeFils in listNodeSuc:
            if nodeFils.stgnode == True :
                print("*************************************ATTEINTDRE LE BORD***********************************")
                print("*************************************ATTEINTDRE LE BORD***********************************")


            self.parcour_recurssif(nodeFils, parser, escapes_routes,content_nodes_evac)



    def merge_noeuds_predesseur(self,listNodes,listArc):
        pass





############## Main ################
def main():
    my_parser = Parser(sys.argv[1], sys.argv[2])
    # data.txt
    nstarting_node, safe_node, num_nodes, num_edges, evacuation_info, graph = my_parser.parse_data_file()
    # sol.txt
    resolved_instance, nnode_evacuate, nodes_evacuate = my_parser.parse_sol_file()

    content_evac_info = my_parser.arrange_evacuation_info(evacuation_info)
    content_graph = my_parser.arrange_graph(graph)
    content_nodes_evac = my_parser.arrange_nodes_evacuation(nodes_evacuate)

    my_parser.extract_node_content_evac_info(content_evac_info, safe_node)

    print("mec "+str(len(node_list)))
    my_parser.extract_arc_content_graph(content_graph)

    escapes_routes = my_parser.extract_escapes_routes(content_evac_info)





    listInter = [];
    listInter = sorted(node_list, key=lambda onenode: onenode.nid)

    node_list.clear();
    node_list.extend(listInter)

    for node in node_list:
        print("lalla444" + str(node.nid))





    # print('Evacuation information')
    # for info in content_evac_info:
    #     print(str(info))
    #
    # print()
    # print('Arc information')
    # for info2 in content_graph:
    #     print(str(info2))
    #
    # print()
    # print('Solution_evac_info')
    # for info3 in content_nodes_evac:
    #     print(str(info3))


    # nodeTest1 = Node('4', 0, False, True,['0','0','7','6'])
    # nodeTest2 = Node('1', 0, False, True, ['5','5','5'])
    # nodeTest3 = Node('5', 0, False, True, [])
    # arc1 = Arc('3','35','7','12','4','5')
    # arc2 = Arc('2', '35', '9','15','1','5')

    my_checker = Checker(sys.argv[1], sys.argv[2])
    # my_checker.create_debut_list(content_nodes_evac)
    # listContient = []
    # listContient.extend(my_checker.find_arc_predesseur_Graphe(node_list[3], my_parser, escapes_routes))
    # print("Testpoint   "+str(listContient[0].arid))
    # print("Testpoint2   " + str(listContient[1].arid))
    # listSucNodes = my_checker.find_node_predesseur_Graphe(listContient)
    # my_checker.merge_list_noeuds_predesseur(listSucNodes,node_list[3],listContient)




    #

    #my_checker.find_arc_predesseur_Graphe(nodeTest,my_parser, escapes_routes)
    # # only the first escape route
    # for route in escapes_routes:
    #     tpath = my_parser.get_path(node_list, arc_list, route)
    #     my_checker.find_arc_predesseur_Path(nodeTest, tpath)

    my_checker.parcour_recurssif(node_list[5],my_parser, escapes_routes, content_nodes_evac)


    tpath2 = my_parser.get_path(node_list, arc_list, escapes_routes[0])




    for tp in tpath2:
        print("#########")
        print(tp['node_1'])
        print(tp['arc'])
        print(tp['node_2'])
        print("#########")

    tpath3 = my_parser.get_path(node_list, arc_list, escapes_routes[1])

    for tp in tpath3:
        print("#########")
        print(tp['node_1'])
        print(tp['arc'])
        print(tp['node_2'])

    tpath4 = my_parser.get_path(node_list, arc_list, escapes_routes[2])

    for tp in tpath4:
        print("#########")
        print(tp['node_1'])
        print(tp['arc'])
        print(tp['node_2'])



            # print("La borne inferieur d'une path est "+str(get_inferior_borene_path(tpath)))
    # print("La borne inferieur du graphe  est "+str(get_inferior_borene_graph(escapes_routes)))
    # write_solution()

    print("mec " + str(len(node_list)))
    print("mec " + str(len(arc_list)))
if __name__ == '__main__':
    main()
